"""Add file_size field to Paper model

Revision ID: 4626e830026c
Revises: 
Create Date: 2025-04-01 22:39:37.590361

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4626e830026c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_ai_settings_id', table_name='ai_settings')
    op.drop_table('ai_settings')
    op.drop_index('ix_concept_explanations_concept', table_name='concept_explanations')
    op.drop_index('ix_concept_explanations_id', table_name='concept_explanations')
    op.drop_table('concept_explanations')
    op.drop_index('ix_research_analysis_id', table_name='research_analysis')
    op.drop_table('research_analysis')
    op.drop_index('ix_assistant_sessions_id', table_name='assistant_sessions')
    op.drop_table('assistant_sessions')
    op.drop_index('ix_assistant_messages_id', table_name='assistant_messages')
    op.drop_table('assistant_messages')
    op.add_column('papers', sa.Column('file_size', sa.Integer(), nullable=True))
    op.add_column('papers', sa.Column('last_read_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('papers', sa.Column('sections', sa.JSON(), nullable=True))
    op.add_column('papers', sa.Column('methodology', sa.JSON(), nullable=True))
    op.add_column('papers', sa.Column('references', sa.JSON(), nullable=True))
    op.add_column('papers', sa.Column('code_implementation', sa.Text(), nullable=True))
    op.add_column('papers', sa.Column('key_findings', sa.JSON(), nullable=True))
    op.add_column('papers', sa.Column('weaknesses', sa.JSON(), nullable=True))
    op.add_column('papers', sa.Column('future_work', sa.Text(), nullable=True))
    op.add_column('papers', sa.Column('analysis_status', sa.String(), nullable=True))
    op.add_column('papers', sa.Column('analysis_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('papers', sa.Column('folder_id', sa.String(), nullable=True))
    op.create_foreign_key(None, 'papers', 'folders', ['folder_id'], ['id'], ondelete='SET NULL')
    op.add_column('tags', sa.Column('owner_id', sa.String(), nullable=True))
    op.create_foreign_key(None, 'tags', 'users', ['owner_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tags', type_='foreignkey')
    op.drop_column('tags', 'owner_id')
    op.drop_constraint(None, 'papers', type_='foreignkey')
    op.drop_column('papers', 'folder_id')
    op.drop_column('papers', 'analysis_date')
    op.drop_column('papers', 'analysis_status')
    op.drop_column('papers', 'future_work')
    op.drop_column('papers', 'weaknesses')
    op.drop_column('papers', 'key_findings')
    op.drop_column('papers', 'code_implementation')
    op.drop_column('papers', 'references')
    op.drop_column('papers', 'methodology')
    op.drop_column('papers', 'sections')
    op.drop_column('papers', 'last_read_at')
    op.drop_column('papers', 'file_size')
    op.create_table('assistant_messages',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('SYSTEM', 'USER', 'ASSISTANT', name='messagerole'), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sequence', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['assistant_sessions.id'], name='assistant_messages_session_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='assistant_messages_pkey')
    )
    op.create_index('ix_assistant_messages_id', 'assistant_messages', ['id'], unique=False)
    op.create_table('assistant_sessions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('session_type', postgresql.ENUM('GENERAL', 'RESEARCH_GAP', 'INNOVATION', 'EXPERIMENT', 'WRITING', name='assistanttype'), autoincrement=False, nullable=True),
    sa.Column('context', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_message_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('paper_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='assistant_sessions_owner_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['paper_id'], ['papers.id'], name='assistant_sessions_paper_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='assistant_sessions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_assistant_sessions_id', 'assistant_sessions', ['id'], unique=False)
    op.create_table('research_analysis',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('analysis_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('domain', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('content', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('references', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name='research_analysis_owner_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['assistant_sessions.id'], name='research_analysis_session_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='research_analysis_pkey')
    )
    op.create_index('ix_research_analysis_id', 'research_analysis', ['id'], unique=False)
    op.create_table('concept_explanations',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('concept', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('references', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('access_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='concept_explanations_pkey')
    )
    op.create_index('ix_concept_explanations_id', 'concept_explanations', ['id'], unique=False)
    op.create_index('ix_concept_explanations_concept', 'concept_explanations', ['concept'], unique=True)
    op.create_table('ai_settings',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('default_provider', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('openai_api_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('deepseek_api_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('claude_api_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('custom_settings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='ai_settings_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ai_settings_pkey')
    )
    op.create_index('ix_ai_settings_id', 'ai_settings', ['id'], unique=False)
    # ### end Alembic commands ### 